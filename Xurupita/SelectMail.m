//  Created by Sir Cheshire

#import "SelectMail.h"
#import <MessageUI/MessageUI.h>
#import <AddressBook/AddressBook.h>
#import <AddressBookUI/AddressBookUI.h>
#import "LogicCore.h"

@implementation SelectMail
@synthesize botaoRet;
@synthesize navItem;
@synthesize scrollView;

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

-(id) initWithDocs:(NSArray*) docs tipos:(NSArray*) types
{
    self = [super init];
    
    if (self) 
    {
        docsToSelect = docs;
        tipos = types;
    }
    
    return  self;
}

- (void)didReceiveMemoryWarning
{
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
    
    // Release any cached data, images, etc that aren't in use.
}

#pragma mark - View lifecycle

-(NSString*) searchIcon:(NSString*) nome 
{
#ifdef PT
    if ([tipos containsObject:nome]) 
    {
        nome = [NSString stringWithFormat:@"%@.png",nome];
        return[nome stringByReplacingOccurrencesOfString:@" " withString:@"-"];
    }
    else
    {
        return @"Outro.png";
    }
#endif
    
#ifdef ENG
    
    
    if ([tipos containsObject:nome]  && !([nome isEqualToString:@"VIP Card"] || [nome isEqualToString:@"Reward Card"])) 
    {
       
        
        nome = [NSString stringWithFormat:@"%@.png",[original objectAtIndex:[tipos indexOfObject:nome]]];
        return[nome stringByReplacingOccurrencesOfString:@" " withString:@"-"];
    }
    else if ([nome isEqualToString:@"VIP Card"] || [nome isEqualToString:@"Reward Card"]) 
    {
        
        nome = [NSString stringWithFormat:@"%@.png",nome];
        return[nome stringByReplacingOccurrencesOfString:@" " withString:@"-"];
    }
    else
    {
       
        return @"Outro.png";
    }
    
#endif
}

-(void) setOriginal:(NSArray*) lista
{
    original = lista;
}

-(void) enviar:(id) sender
{
    
    MFMailComposeViewController *mailComposer; 
    mailComposer  = [[MFMailComposeViewController alloc] init];
    
    NSMutableString* docs = [NSMutableString new];
    
    for (NSString * s in docsToSelect) 
    {
        int temp = [docsToSelect indexOfObject:s];
        if ([[butons objectAtIndex:temp] isOn]) 
        {
            NSMutableArray* imgs = [LogicCore loadImagesfromDoc:s];
            for (UIImage * i in imgs) 
            {
                NSData *imageData = UIImagePNGRepresentation (i);
                [mailComposer addAttachmentData:imageData mimeType:@"image/png" fileName:[NSString stringWithFormat:@"%@_%d.png",s,[imgs indexOfObject:i]+1]];
            } 
         
            [docs appendFormat:@"%@\n", s];
        }
    }
    
    mailComposer.mailComposeDelegate = self;
    [mailComposer setModalPresentationStyle:UIModalPresentationFormSheet];
    
#ifdef ENG
    [mailComposer setSubject:@"Documents generated by Safe Docs"];
    [mailComposer setMessageBody:[NSString stringWithFormat:@"Documents sent by Safe Docs on attachment. \n\n %@",docs ] isHTML:NO];
#endif
    
#ifdef PT
    [mailComposer setSubject:@"Documentos gerados pelo Porta Docs"];
    [mailComposer setMessageBody:[NSString stringWithFormat:@"Em anexo os documentos enviados pelo app Porta Docs. \n\n %@",docs ] isHTML:NO];
#endif
    
    [mailComposer.navigationBar setBarStyle:UIBarStyleBlackOpaque];
    
    [self presentModalViewController:mailComposer animated:YES];
}

- (void)mailComposeController:(MFMailComposeViewController*)controller didFinishWithResult:(MFMailComposeResult)result error:(NSError*)error 
{ 
    [self dismissModalViewControllerAnimated:YES];
    
}

-(void) setInterface
{
    startPoint = 0;

    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)
    {
        gap = 140;
        
        imageHeight = 100;
        imageWidth =100;
        imageTop = 20;
        imageLeft = 20;
        
        labelHeight = 100;
        labelWidth = 400;
        labelTop = 20;
        labelLeft = 140;
        
        buttonHeight = 80;
        buttonWidth = 120;
        buttonTop = 50;
        buttonLeft = 500;
        
        [scrollView setContentSize:CGSizeMake(768,0)];
    }
    else
    {
        gap = 70;
        
        imageHeight = 50;
        imageWidth =50;
        imageTop = 10;
        imageLeft = 10;
        
        labelHeight = 50;
        labelWidth = 200;
        labelTop = 10;
        labelLeft = 70;
        
        buttonHeight = 40;
        buttonWidth = 60;
        buttonTop = 15;
        buttonLeft = 220;
        
        [scrollView setContentSize:CGSizeMake(320,0)];
    }

    [scrollView setScrollEnabled:YES];
    
    butons = [NSMutableArray new];
    
    for (NSString * s in docsToSelect) 
    {
        UIImageView *i= [[UIImageView alloc] initWithImage:[UIImage imageNamed:[self searchIcon:s]]];
        [i setFrame:CGRectMake(imageLeft,startPoint+imageTop,imageWidth,imageHeight)];

        UILabel* texto = [[UILabel alloc] initWithFrame:CGRectMake(labelLeft, startPoint+labelTop, labelWidth, labelHeight)];
        texto.text=s;
        texto.numberOfLines = 1;
        
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)
        {
            texto.font = [UIFont fontWithName:@"Helvetica" size:24];
        }
        else
        {
            texto.font = [UIFont fontWithName:@"Helvetica" size:12];
        }
        texto.textAlignment = UITextAlignmentLeft;
        [texto setBackgroundColor:[UIColor clearColor]];
        
        UISwitch* selectButton = [[UISwitch alloc] initWithFrame:CGRectMake(buttonLeft, startPoint+buttonTop, buttonWidth, buttonHeight)]; 
        
        [butons addObject:selectButton]; 
        
        [scrollView addSubview:i];
        [scrollView addSubview:texto];
        [scrollView addSubview:[butons lastObject]];
        [scrollView setContentSize:CGSizeMake(scrollView.contentSize.width,scrollView.contentSize.height+gap)];
        
        startPoint = startPoint+gap;
    }
    UIButton* enviar = [UIButton buttonWithType:UIButtonTypeCustom];
    
    [enviar setBackgroundImage:[UIImage imageNamed:@"DefinirSenha.png"] forState:UIControlStateNormal];
    
    [enviar setBackgroundImage:[UIImage imageNamed:@"DefinirSenhaOver.png"] forState:UIControlStateHighlighted];
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)
    {
        
        [enviar.titleLabel setFont:[UIFont systemFontOfSize:24]];
    }
    
    [enviar setTitleColor:[UIColor colorWithRed:57.0/255.0 green:54.0/255.0 blue:40.0/255.0 alpha:1.0] forState:UIControlStateNormal];
    
    enviar.frame = CGRectMake((self.view.frame.size.width-97)/2, startPoint, 97, 29);
#ifdef PT 
    [enviar setTitle:@"Enviar" forState:UIControlStateNormal];
#endif
    
#ifdef ENG 
    [enviar setTitle:@"Send" forState:UIControlStateNormal];
#endif
    
    [enviar addTarget:self action:@selector(enviar:) forControlEvents:UIControlEventTouchUpInside];
    
    [scrollView setContentSize:CGSizeMake(scrollView.contentSize.width,scrollView.contentSize.height+gap)];
    
    [scrollView addSubview:enviar];
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    
#ifdef ENG
    [navItem setTitle:@"Send through Email"];
    [botaoRet setTitle:@"Return" forState:UIControlStateNormal];
#endif
    
    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(-50, 0, 180, 30)];
    [label setTextAlignment:UITextAlignmentCenter];
	[label setFont:[UIFont boldSystemFontOfSize:16.0]];
	[label setBackgroundColor:[UIColor clearColor]];
	[label setTextColor:[UIColor colorWithRed:57.0/255.0 green:54.0/255.0 blue:40.0/255.0 alpha:1.0]];
    
	[label setText:navItem.title];
	[navItem setTitleView:label];
    
    [self setInterface];
    
    [self.view setBackgroundColor:[UIColor colorWithPatternImage:[UIImage imageNamed:@"BackgroundPattern.png"]]];
    // Do any additional setup after loading the view from its nib.
}

- (void)viewDidUnload
{
    [self setScrollView:nil];
    [self setNavItem:nil];
    [self setBotaoRet:nil];
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    // Return YES for supported orientations
    return ((interfaceOrientation == UIInterfaceOrientationPortrait) || (interfaceOrientation == UIInterfaceOrientationPortraitUpsideDown));
}


- (IBAction)retornar:(id)sender
{
    [self dismissModalViewControllerAnimated:YES];
}
@end
